diff --git a/node_modules/jest-google-maps-mock/lib/createGoogleMapsMock.js b/node_modules/jest-google-maps-mock/lib/createGoogleMapsMock.js
index 7501b36..8e0e627 100644
--- a/node_modules/jest-google-maps-mock/lib/createGoogleMapsMock.js
+++ b/node_modules/jest-google-maps-mock/lib/createGoogleMapsMock.js
@@ -8,7 +8,7 @@ exports["default"] = void 0;
 var createMockFuncsFromArray = function createMockFuncsFromArray(instance) {
   var names = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
   names.forEach(function (name) {
-    instance[name] = jest.fn().mockName(name);
+    instance[name] = vi.fn().mockName(name);
   });
 };
 
@@ -18,7 +18,7 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
   var createMVCObject = function createMVCObject(instance) {
     var listeners = {};
     instance.listeners = listeners;
-    instance.addListener = jest.fn(function (event, fn) {
+    instance.addListener = vi.fn(function (event, fn) {
       listeners[event] = listeners[event] || [];
       listeners[event].push(fn);
       return {
@@ -41,11 +41,11 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
       Lo: 3,
       Go: 4
     },
-    BicyclingLayer: jest.fn().mockImplementation(function () {
+    BicyclingLayer: vi.fn().mockImplementation(function () {
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setMap']);
     }),
-    Circle: jest.fn().mockImplementation(function (opts) {
+    Circle: vi.fn().mockImplementation(function (opts) {
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setCenter', 'setDraggable', 'setEditable', 'setMap', 'setOptions', 'setRadius', 'setVisible']);
@@ -68,12 +68,12 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
       BOTTOM_RIGHT: 12,
       CENTER: 13
     },
-    Data: jest.fn().mockImplementation(function (options) {
+    Data: vi.fn().mockImplementation(function (options) {
       this.options = options;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setControlPosition', 'setControls', 'setDrawingMode', 'setMap', 'setStyle']);
     }),
-    DirectionsRenderer: jest.fn().mockImplementation(function (opts) {
+    DirectionsRenderer: vi.fn().mockImplementation(function (opts) {
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setDirections', 'setMap', 'setOptions', 'setPanel', 'setRouteIndex']);
@@ -123,7 +123,7 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
       REQUEST_DENIED: 'REQUEST_DENIED',
       UNKNOWN_ERROR: 'UNKNOWN_ERROR'
     },
-    FusionTablesLayer: jest.fn().mockImplementation(function (options) {
+    FusionTablesLayer: vi.fn().mockImplementation(function (options) {
       this.options = options;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setMap', 'setOptions']);
@@ -162,15 +162,15 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
     LatLng: function LatLng() {},
     LatLngBounds: function LatLngBounds() {},
     MVCArray: function MVCArray() {},
-    MVCObject: jest.fn().mockImplementation(function () {
+    MVCObject: vi.fn().mockImplementation(function () {
       createMVCObject(this);
     }),
-    Map: jest.fn().mockImplementation(function (mapDiv, opts) {
+    Map: vi.fn().mockImplementation(function (mapDiv, opts) {
       this.mapDiv = mapDiv;
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setCenter', 'setClickableIcons', 'setHeading', 'setMapTypeId', 'setOptions', 'setStreetView', 'setTilt', 'getZoom', 'setZoom', 'fitBounds', 'getBounds', 'panToBounds']);
-      this.getDiv = jest.fn().mockImplementation(function () {
+      this.getDiv = vi.fn().mockImplementation(function () {
         return this.mapDiv;
       });
     }),
@@ -188,7 +188,7 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
       TERRAIN: 'terrain'
     },
     MapTypeRegistry: function MapTypeRegistry() {},
-    Marker: jest.fn().mockImplementation(function (opts) {
+    Marker: vi.fn().mockImplementation(function (opts) {
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setMap', 'setOpacity', 'setOptions', 'setPosition', 'setShape', 'setTitle', 'setVisible', 'setZIndex']);
@@ -213,12 +213,12 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
     },
     OverlayView: function OverlayView() {},
     Point: function Point() {},
-    Polygon: jest.fn().mockImplementation(function (opts) {
+    Polygon: vi.fn().mockImplementation(function (opts) {
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setDraggable', 'setEditable', 'setMap', 'setOptions', 'setPath', 'setPaths', 'setVisible']);
     }),
-    Polyline: jest.fn().mockImplementation(function (opts) {
+    Polyline: vi.fn().mockImplementation(function (opts) {
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setDraggable', 'setEditable', 'setMap', 'setOptions', 'setPath', 'setVisible']);
@@ -258,7 +258,7 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
       FORWARD_CLOSED_ARROW: 1,
       FORWARD_OPEN_ARROW: 2
     },
-    TrafficLayer: jest.fn().mockImplementation(function (opts) {
+    TrafficLayer: vi.fn().mockImplementation(function (opts) {
       this.opts = opts;
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setMap', 'setOptions']);
@@ -268,7 +268,7 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
       OPTIMISTIC: 'optimistic',
       PESSIMISTIC: 'pessimistic'
     },
-    TransitLayer: jest.fn().mockImplementation(function () {
+    TransitLayer: vi.fn().mockImplementation(function () {
       createMVCObject(this);
       createMockFuncsFromArray(this, ['setMap']);
     }),
@@ -301,15 +301,15 @@ var createGoogleMapsMock = function createGoogleMapsMock() {
     },
     __gjsload__: function __gjsload__() {},
     event: {
-      clearInstanceListeners: jest.fn().mockName('clearInstanceListeners')
+      clearInstanceListeners: vi.fn().mockName('clearInstanceListeners')
     }
   };
 
   if (libraries.includes('places')) {
     maps.places = {
-      AutocompleteService: jest.fn(function () {
+      AutocompleteService: vi.fn(function () {
         return {
-          getPlacePredictions: jest.fn()
+          getPlacePredictions: vi.fn()
         };
       }),
       PlacesServiceStatus: {
